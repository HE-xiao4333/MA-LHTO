import torch
import torch.nn as nn
import torch.nn.functional as F

# 初始化函数
def init_weights_xavier(m):
    if isinstance(m, nn.Linear):
        nn.init.xavier_uniform_(m.weight)
        nn.init.constant_(m.bias, 0)

def init_weights_he(m):
    if isinstance(m, nn.Linear):
        nn.init.kaiming_uniform_(m.weight, nonlinearity='relu')
        nn.init.constant_(m.bias, 0)

# 用户 Agent 网络
class UserAgentNetwork(nn.Module):
    def __init__(self, input_dim):
        super(UserAgentNetwork, self).__init__()
        self.fc1 = nn.Linear(input_dim, 128)
        self.fc2 = nn.Linear(128, 64)
        self.output_layer = nn.Linear(64, 1)  # 输出 0/1

    def forward(self, x):
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        x = torch.sigmoid(self.output_layer(x))  # 使用 sigmoid 激活函数
        return x

# 云 Agent 网络
class CloudAgentNetwork(nn.Module):
    def __init__(self, input_dim):
        super(CloudAgentNetwork, self).__init__()
        self.fc1 = nn.Linear(input_dim, 256)
        self.fc2 = nn.Linear(256, 128)
        self.output_layer1 = nn.Linear(128, 2)  # 输出两个 0-1 之间的 1 位小数
        self.output_layer2 = nn.Linear(128, 2)  # 输出两个 0-1 之间的 2 位小数

    def forward(self, x):
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        output1 = torch.sigmoid(self.output_layer1(x))  # 使用 sigmoid 激活函数
        output2 = torch.sigmoid(self.output_layer2(x))  # 使用 sigmoid 激活函数
        return output1, output2

# 创建网络实例
user_input_dim = 10  # 根据实际输入维度设置
cloud_input_dim = 20  # 根据实际输入维度设置

user_agent = UserAgentNetwork(user_input_dim)
cloud_agent = CloudAgentNetwork(cloud_input_dim)

# 应用初始化函数
user_agent.apply(init_weights_he)  # 隐藏层使用 He 初始化
user_agent.output_layer.apply(init_weights_xavier)  # 输出层使用 Xavier 初始化

cloud_agent.apply(init_weights_he)  # 隐藏层使用 He 初始化
cloud_agent.output_layer1.apply(init_weights_xavier)  # 输出层使用 Xavier 初始化
cloud_agent.output_layer2.apply(init_weights_xavier)  # 输出层使用 Xavier 初始化
